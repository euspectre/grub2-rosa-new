From 54a4f53f9ecae2378195e4e66a8410d3862a0be2 Mon Sep 17 00:00:00 2001
From: Jan Kara <jack@suse.cz>
Date: Mon, 14 Jul 2014 17:21:30 +0200
Subject: [PATCH 11/23] xfs: Convert inode numbers to cpu endianity immediately
 after reading

Currently XFS driver converted inode numbers to native endianity only
when using them to compute inode position. Although this works, it is
somewhat confusing. So convert inode numbers when reading them from disk
structures as every other field.

Signed-off-by: Jan Kara <jack@suse.cz>
---
 grub-core/fs/xfs.c | 13 ++++++-------
 1 file changed, 6 insertions(+), 7 deletions(-)

diff -urN grub-2.00/grub-core/fs/xfs.c grub-2.00-patched/grub-core/fs/xfs.c
--- grub-2.00/grub-core/fs/xfs.c	2016-07-08 13:26:00.240923100 +1000
+++ grub-2.00-patched/grub-core/fs/xfs.c	2016-07-08 13:24:54.758924819 +1000
@@ -180,14 +180,14 @@
 GRUB_XFS_INO_INOINAG (struct grub_xfs_data *data,
 		      grub_uint64_t ino)
 {
-  return (grub_be_to_cpu64 (ino) & ((1LL << GRUB_XFS_INO_AGBITS (data)) - 1));
+  return (ino & ((1LL << GRUB_XFS_INO_AGBITS (data)) - 1));
 }
 
 static inline grub_uint64_t
 GRUB_XFS_INO_AG (struct grub_xfs_data *data,
 		 grub_uint64_t ino)
 {
-  return (grub_be_to_cpu64 (ino) >> GRUB_XFS_INO_AGBITS (data));
+  return (ino >> GRUB_XFS_INO_AGBITS (data));
 }
 
 static inline grub_disk_addr_t
@@ -498,13 +498,12 @@
 	if (smallino)
 	  {
 	    parent = grub_be_to_cpu32 (diro->inode.data.dir.dirhead.parent.i4);
-	    parent = grub_cpu_to_be64 (parent);
 	    /* The header is a bit smaller than usual.  */
 	    de = (struct grub_xfs_dir_entry *) ((char *) de - 4);
 	  }
 	else
 	  {
-	    parent = diro->inode.data.dir.dirhead.parent.i8;
+	    parent = grub_be_to_cpu64(diro->inode.data.dir.dirhead.parent.i8);
 	  }
 
 	/* Synthesize the direntries for `.' and `..'.  */
@@ -537,7 +536,6 @@
 		| (((grub_uint64_t) inopos[5]) << 16)
 		| (((grub_uint64_t) inopos[6]) << 8)
 		| (((grub_uint64_t) inopos[7]) << 0);
-	    ino = grub_cpu_to_be64 (ino);
 
 	    grub_memcpy (name, de->name, de->len);
 	    name[de->len] = '\0';
@@ -618,7 +616,7 @@
 		   is not used by GRUB.  So it can be overwritten.  */
 		filename[direntry->len] = '\0';
 
-		if (call_hook (direntry->inode, filename))
+		if (call_hook (grub_be_to_cpu64(direntry->inode), filename))
 		  {
 		    grub_free (dirblock);
 		    return 1;
@@ -680,7 +678,7 @@
     goto fail;
 
   data->diropen.data = data;
-  data->diropen.ino = data->sblock.rootino;
+  data->diropen.ino = grub_be_to_cpu64(data->sblock.rootino);
   data->diropen.inode_read = 1;
   data->bsize = grub_be_to_cpu32 (data->sblock.bsize);
   data->agsize = grub_be_to_cpu32 (data->sblock.agsize);
